addre2 <- xpathApply(pageRender2, "//div[@class='food-type']/span[/span]",fun = xmlValue)[[1]]
address <- xpathApply(pageRender, "//li[@class='address adr']/span[@class='addr street-address']",
fun=xmlValue[[1]])
address <- xpathApply(pageRender, "//li[@class='address adr']/span[@class='addr street-address']",
fun=xmlValue)[[1]]
addre2 <- xpathApply(pageRender2, "//div[@class='kk-vendor-schedule-container']/span[@class='class='col-sm-6 col-xs-12 text-left']",fun = xmlValue)[[1]]
addre2 <- xpathApply(pageRender2, "//div[@class='kk-vendor-schedule-container']/div[@class='class='col-sm-6 col-xs-12 text-left']",fun = xmlValue)[[1]]
addre2 <- xpathApply(pageRender2, "//div[@class='kk-vendor-schedule-container']/div[@class='col-sm-6 col-xs-12 text-left']",fun = xmlValue)[[1]]
addre2 <- xpathApply(pageRender2, "//div[@class='kk-vendor-schedule-container']/div[@class='col-sm-6 col-xs-12 text-left']",fun = xmlValue)[[1]]
options(error=recover)
addre2 <- xpathApply(pageRender2, "//div[@class='kk-vendor-schedule-container']/div[@class='col-sm-6 col-xs-12 text-left']",fun = xmlValue)[[1]]
thePage2 <- readLines(address)
pageRender2 <- htmlParse(thePage2)
addre2 <- xpathApply(pageRender2, "//div[@class='kk-vendor-schedule-container']/div[@class='col-sm-6 col-xs-12 text-left']",fun = xmlValue)[[1]]
addre2 <- xpathApply(pageRender2, "//div[@class='kk-vendor-schedule-container']/div[@class='col-sm-6 col-xs-12 text-left']",fun = xmlValue)[[0]]
addre2 <- xpathApply(pageRender2, "//div[@class='col-md-12 info-row text-center']/div[@class='kk-vendor-schedule-container']/div[@class='col-sm-6 col-xs-12 text-left']",fun = xmlValue)[[1]]
options(error=hide)
options(error = NULL)
clc
address <- "http://www.menupages.com/restaurants/fiores-pizza/menu"
thePage <- readLines(address)
thePage <- readLines(address)
pageRender <- htmlParse(thePage)
address <- xpathApply(pageRender, "//li[@class='address adr']/span[@class='addr street-address']",
fun=xmlValue)[[1]]
head(address)
city <- xpathapply
y <- xpathApply(pageRender, "//li[@class='address adr']/span[@class='addr street-address']",
fun=xmlValue)[[1]])
city <- xpathApply(pageRender, "//li[@class='address adr']/span[@class='addr street-address'/span[@class='city-zip']]",
fun=xmlValue)[[1]]
city <- xpathApply(pageRender, "//li[@class='address adr']/span[@class='addr street-address'/span[@class='locality']]",
fun=xmlValue)[[1]]
city <- xpathApply(pageRender, "//li[@class='address adr']/span[@class='locality']]",
fun=xmlValue)[[1]]
city <- xpathApply(pageRender, "//li[@class='address adr']/span[@class='locality']",
fun=xmlValue)[[1]]
city <- xpathApply(pageRender, "//li[@class='address adr']/span/span[@class='locality']",
fun=xmlValue)[[1]]
city
bowl <- readHTMLTable("https://www.jaredlander.com/2012/02/another-kind-of-super-bowl-pool",
header = F, stringsAsFactors = F, which = 1)
bowl <- readHTMLTable("https://www.jaredlander.com/2012/02/another-kind-of-super-bowl-pool/",
header = F, stringsAsFactors = F, which = 1)
bowl <- readHTMLTable("https://www.jaredlander.com/2012/02/another-kind-of-super-bowl-pool/",
header = F, stringsAsFactors = F, which = 1)
header <- xpathSApply(pageRender, "//*[@id='restaurant-menu']/h3",xmlValue)
header
item <- xpathSApply(pageRender, "//table[starts-with(@class, 'prices-')]")
library(XML)
item <- xpathSApply(pageRender, "//table[starts-with(@class, 'prices-')]")
item <- xpathSApply(pageRender, "//table")
require(plyr)
doc <- htmlParse(menu)
doc2 <- readLines(menu)
menu()
menu
menu1 <- "http://www.menupages.com/restaurants/all-areas/all-neighborhoods/pizza/"
doc2 <- htmlParse(menu1)
head(doc)
head(doc2)
placeNmaeLink <- xpathApply(doc2, "//table/tr/td[@class='name-address sorting_2']/a[@class='link search_result_link']",
fun = function(x){c(xmlValue(x, recursive = F), Link= xmlAttrs(x)[2])})
placeNmaeLink <- xpathApply(doc2, "//table/tr/td[@class='name-address sorting_2']/a[@class='link search_result_link']",
fun = function(x){c(Name = xmlValue(x, recursive = F),
Link= xmlAttrs(x)[2])})
menu1 <- "http://www.menupages.com/restaurants/all-areas/all-neighborhoods/pizza/"
doc2 <- htmlParse(menu1)
placeNmaeLink <- xpathApply(doc2, "//table/tr/td[@class='name-address sorting_2']/a[@class='link search_result_link']",
fun = function(x){ c(Name = xmlValue(x, recursive = FALSE),
Link= xmlAttrs(x)[2]) })
placeNmaeLink <- xpathApply(doc2, "//table/tr/td[@class='name-address sorting_2']/a[@class='link search_result_link']",
fun = function(x){ c(Name = xmlValue(x, recursive = FALSE),
Link= xmlAttrs(x)[2]) })
menu <- "http://www.menupages.com/restaurants/all-areas/all-neighborhoods/pizza/"
doc2 <- htmlParse(menu)
rm(menu2)
rm(menu1)
placeNameLink <- xpathApply(doc2, "//table/tr/td[@class='name-address sorting_2']/a[@class='link search_result_link']",
fun = function(x){ c(Name = xmlValue(x, recursive = FALSE),
Link= xmlAttrs(x)[2]) })
teafile <- "https://www.jaredlander.com/data/SocialComments.xml"
require(XML)
teaparsed <- xmlToList(teafile)
?xpathApply
?xpathSApply
library(CRF)
?CRF
thePage
clc
save.image("G:/WORKSPACE_R/LiveLesson/xml2.RData")
rm(list=ls())
load("G:/WORKSPACE_R/LiveLesson/xml2.RData")
rm(list=ls())
say.hello <- function()
{
print("Hello,world!")
}
say.hello
say.hello()
save.image("G:/WORKSPACE_R/LiveLesson/sayhello1.RData")
rm(list = is)
rm(list = is())
rm(list=is())
rm(list=ls())
sprintf("hello %s", "mohsen")
sprintf("hello %s, today is %s", "mohsen", "sunday")
hello.person <- function(name)
{
print(sprintf("Hello %s", name))
}
hello.person(mohsen)
hello.person("mohsen")
hello.person("mohsen")
hello.person("bob")
hello.person("patrick")
hello.person <- function(first, last)
{
print(sprintf("Hello %s %s", first, last))
}
hello.person("ali", "ahmad")
hello.person("ali", "yousefzadeh")
hello.person(last = "ysf" ,first = "ali")
hello.person(last = "ysf" , "mohsen")
hello.person <- function(first, last= "Doe")
{
print(sprintf("Hello %s %s", first, last))
}
hello.person("jared", "Lander")
hello.person("jared")
hello.person(last =  "Lander")
hello.person(first = "jared")
hello.person("jared", "lander", "goodbye")
hello.person <- function(first, last= "Doe", ...)
{
print(sprintf("Hello %s %s", first, last))
}
hello.person("jared", "lander", "goodbye")
hello.person("jared", extra = "goodbye")
save.image("G:/WORKSPACE_R/LiveLesson/basc_function_argument.RData")
rm(list = ls())
1 == 1
1 < 1
1 <= 1
1 > 1
1 <= 1
1 != 1
toCheck <- 1
if(toCheck == 1)
{
print("Hello")
}
toCheck <- 0
if(toCheck == 1)
{
print("Hello")
}
check.bool <- function(x)
{
if(x == 1)
{
print("Hello")
} else
{
print("Goodbye")
}
}
check.bool(1)
check.bool(0)
check.bool("kk")
check.bool(T)
check.bool(TRUE)
check.bool <- function(x)
{
if (x == 1)
{
# enything after this symbol is comment
# ignored by computer
print("Hello")
} else if
{
print("Goodbye")
} else
{
print("confused")
}
}
check.bool <- function(x)
{
if (x == 1)
{
# enything after this symbol is comment
# ignored by computer
print("Hello")
} else if
{
print("Goodbye")
} else
{
print("confused")
}
}
check.bool <- function(x)
{
if (x == 1)
{
# enything after this symbol is comment
# ignored by computer
print("Hello")
} else if ( x == 0)
{
print("Goodbye")
} else
{
print("confused")
}
}
check.bool(1)
check.bool(0)
check.bool(2)
check.bool("k")
rm(list = ls())
ls
ls()
use.switch <- function(x)
{
switch("a"= "first",
"b"= "second",
"c"= "third",
"z"= "last",
"other")
}
#rm(list = ls())
use.switch <- function(x)
{
switch(x, "a"= "first",
"b"= "second",
"c"= "third",
"z"= "last",
"other")
}
#rm(list = ls())
use.switch <- function(x)
{
switch(x,
"a"= "first",
"b"= "second",
"c"= "third",
"z"= "last",
"other")
}
use.switch("a")
use.switch("b")
use.switch("c")
use.switch("d")
use.switch(1)
use.switch(2)
use.switch(3)
use.switch(5)
use.switch(6)
is.null(use.switch(6))
ifelse(1==1 , "Yes", "No")
ifelse(1==0 , "Yes", "No")
toTest <- c(1, 1, 0, 1, 0, 1)
ifelse(toTest == 1, "Yes", "No")
class(ifelse(toTest == 1, "Yes", "No"))
mode(ifelse(toTest == 1, "Yes", "No"))
ifelse(toTest == 1, toTest*3, toTest)
ifelse(toTest == 1, toTest*3, "zero")
toTest[2] <- NA
totest
toTest
ifelse(toTest == 1, toTest*3, "zero")
toTest[2] <- NULL
toTest[2] <- NaN
ifelse(toTest == 1, toTest*3, "zero")
#rm(list = ls())
rm(list = ls())
clc
for (i in 1:10)
{
if(i == 3)
{
next
}
print(i)
}
for (i in 1:10)
{
if(i == 3)
{
break
}
print(i)
}
for (i in 1:10)
{
if(i == 6)
{
break
}
print(i)
}
{
if(i == 6)
{
break
}
print(i)
}
rm(list = ls())
theMatrix <- matrix(1:9 , nrow = 3)
theMatrix
apply(theMatrix, MARGIN = 2, sum)
apply(theMatrix, MARGIN = 1, sum)
colSums(theMatrix)
rowSums(theMatrix)
theMatrix[2, 1] <- NA
theMatrix
apply(theMatrix, 1, sum)
apply(theMatrix, 1, sum, na.rm= T)
rowSums(theMatrix)
rowSums(theMatrix, na.rm = T)
theList <- list(A=matrix(1:9, nrow = 3), B=1:5, C=matrix(1:4, 2), D=2)
thel
theList
lapply(theList, sum)
sapply(theList, sum)
theNames <- c("mohsen", "hamed", "hadi")
lapply(theNames, nchar)
rm(list = ls())
firstList <- list(A=matrix(1:16, 4), B=matrix(1:16, 2), C=1:5)
secondList <- list(A=matrix(1:16, 4), B=matrix(1:16, 8), C=15:1)
firstList
secondList
mapply(identical, firstList, secondList)
simplefunc <- function(x,y)
{
NROW(x) + NROW(y)
}
mapply(simplefunc, firstList, secondList)
rm(list = ls())
require(ggplot2)
data("diamonds")
head(diamonds)
mean(diamonds$price)
aggregate(price ~ cut, diamonds, mean )
aggregate(price ~ cut, diamonds, mean, na.rm = T)
aggregate(price ~ cut + color, diamonds, mean)
aggregate(cbind(price, carat) ~ cut, diamonds, mean)
aggregate(cbind(price, carat) ~ cut + color , diamonds, mean)
rm(list = ls())
require(plyr)
head(baseball)
baseball$sf[baseball$year < 1954] <- 0
baseball$sf[baseball$year < 1954,] <- 0
any(is.na(baseball$sf))
baseball$hbp[is.na(baseball$hbp)] <- 0
head(baseball)
any(baseball$hbp)
any(is.na(baseball$hbp))
baseball <- baseball[baseball$ab >= 50, ]
head(baseball)
baseball$OBP <- with(baseball, (h + bb + hbp)/(ab + bb + hb + sf))
baseball$OBP <- with(baseball, (h + bb + hbp) / (ab + bb + hb + sf))
baseball$OBP <- with(baseball, (h + bb + hbp) / (ab + bb + hbp + sf))
head(baseball)
tail(baseball)
View(baseball)
obp <- function(data)
{
c(OBP <- with(data, sum(h + bb + hbp) / sum(ab + bb + hbp + sf)))
}
head(baseball)
View(baseball)
require(plyr)
?ddaply
??ddaply
careerobp <- ddaply(baseball, .variables = "id", obp)
careerobp <- ddply(baseball, .variables = "id", obp)
had(careerobp)
head(careerobp)
obp <- function(data)
{
c(OBP = with(data, sum(h + bb + hbp) / sum(ab + bb + hbp + sf)))
}
careerobp <- ddply(baseball, .variables = "id", obp)
head(careerobp)
careerobp <- careerobp[order(careerobp$OBP, decreasing = TRUE),]
head(careerobp)
theList <- list(A=matrix(1:9, 3), B=1:5,  C=matrix(1:4,2), D=2)
theList
lapply(theList, sum)
llply(theList, sum)
identical(lapply(theList, sum), llply(theList, sum))
sapply(theList, sum)
laply(theList, sum)
class(laply(theList, sum))
mode(laply(theList, sum))
head(diamonds)
aggregate(price ~ cut , diamonds, each(mean, median))
?nomcolwise
??nomcolwise
numcolwise
numcolwise(sum, na.rm = TRUE)(diamonds)
sapply(diamonds, sapply(diamonds, is.numeric))
sapply(diamonds, sapply(diamonds, is.numeric),sum)
sapply(diamonds, sapply[diamonds, is.numeric],sum)
sapply[diamonds, sapply[diamonds, is.numeric],sum]
sapply[diamonds(sapply[diamonds, is.numeric]),sum]
sapply(diamonds(sapply[diamonds, is.numeric]),sum)
sapply(diamonds(sapply(diamonds, is.numeric)),sum)
sapply(diamonds,(sapply(diamonds, is.numeric)),sum)
sapply(diamonds[sapply(diamonds, is.numeric)],sum)
sapply(diamonds[sapply(diamonds, is.numeric)],sum)
?tply
?taply
??tapply
sport <- c("baseball", "vollyball", "basketball")
league <- c("NHL", "MLB", "NFL")
trophy <- c("staely Cup", "Commissioners trophy", "Vince Lombordi trophy")
sports1 <- cbind(sport, league, trophy)
sports1
sports2 <- data.frame(sport = c("kongfu", "jodu"),
league = c("nda" , "pga"),
trophy = c("larry trophy", "wanna trophy"))
sports2
sports <- rbind(sports1, sports2)
sports
codes <- read.table("countryCodes.csv", header = T, stringsAsFactors = F, sep = ",")
head(codes)
codes <- read.table("GovType.csv", header = T, stringsAsFactors = F, sep = ",")
countries <- read.table("GovType.csv", header = T, stringsAsFactors = F, sep = ",")
codes <- read.table("countryCodes.csv", header = T, stringsAsFactors = F, sep = ",")
head(codes)
head(countries)
View(countries)
View(codes)
View(countries)
countryMerged <- merge(x = codes, y = countries, by.x = "country.name", by.y = "country")
countryMerged <- merge(x = codes, y = countries, by.x = "Country.name", by.y = "Country")
View(countryMerged)
require(plyr)
codes <- rename(codes, c(Country.name = "Country"))
countryJoined <- join(x = codes, y = countries, by = "Country")
View(countryJoined)
rm(list=ls())
require(reshape2)
head(airquality)
airMelt <- melt(data = airquality, id.vars = c("Month", "Day"),
value.name = "Value", variable.name = "metric")
head(airMelt, 15)
dim(airquality)
dim(airMelt)
airCast <- dcast(data = airMelt, formula = Day + Month ~ metric, value.var = "Value")
head(airCast)
install.packages("tidyr")
require(tidyr)
require(magrittr)
head(airquality)
airGather <- airquality %>% gather(Metric, Value, -c(Month, Day))
head(airGather)
tail(airGather)
airSpread <- airGather %>% spread(Metric, Value)
head(airSpread)
rm(list=ls())
q()
data("diamonds", package = "ggplot2")
head(diamonds)
dim(diamonds)
head(diamonds)
aggregate(x = diamonds, price ~ cut, mean)
aggregate(x = diamonds$price, list(diamonds$cut), mean)
aggregate(price ~ cut, diamonds, mean)
tapply(diamonds$price, INDEX = diamonds$cut, mean)
require(plyr)
ddply(.data = diamonds, .variables = "cut", .fun = mean(price))
ddply(.data = diamonds, .variables = "cut", .fun = mean("price"))
ddply(.data = diamonds, .variables = "cut", Price= mean(price))
ddply(.data = diamonds, .variables = "cut",summarize, Price= mean(price))
daply(.data = diamonds, .variables = "cut",summarize, Price= mean(price))
head(diamonds)
require(doParallel)
cl <- makeCluster(2)
registerDoParallel(cl)
ddply(diamonds, "cut", function(x) mean(x$price), .parallel = TRUE)
require(data.table)
head(diamonds)
diaDT <- data.table(diamonds)
diaDT
diaDT[, mean(price),by=cut]
require(plyr)
require(dplyr)
head(diamonds)
dim(diamonds)
diamonds %>% head
diamonds %>% dim
diamonds %>% group_by(cut) %>% dplyr::summarize(Price = mean(Price))
diamonds %>% group_by(cut) %>% dplyr::summarize(Price = mean(price))
download.file("http://jaredlander.com/data/diamonds.db",destfile = diamonds.db, method = "curl")
download.file("http://jaredlander.com/data/diamonds.db",destfile = "diamonds.db", method = "curl")
download.file("http://www.jaredlander.com/data/diamonds.db",destfile = "diamonds.db", method = "curl")
download.file("http://www.jaredlander.com/data/diamonds.db",destfile = "diamonds.db", method = "curl")
download.file("https://www.jaredlander.com/data/diamonds.db", method = "curl")
download.file("https://www.jaredlander.com/data/diamonds.db",destfile = "diamonds.db", method = "curl")
require(dplyr)
diaDBSource <- src_sqlite("diamonds")
diaDBSource <- src_sqlite("diamonds.db")
diaDB <- tbl(diaDBSource, "diamonds")
diaDB
diaDB %>% group_by(cut) %>% dplyr::summarize(Price = mean(price))
rm(list=ls())
